PARSER_BEGIN(Karloff)
import java.io.*;

//CLASSE QUE CRIA A ARVORE
class KARLOFFARVORE {
  MAIN main ; 
  LISTAFUNCAO list_func ; 

  //PODEMOS TER 2 CONSTRUTORES 
  KARLOFFARVORE (MAIN main){
    this.main = main 
  }

  KARLOFFARVORE (MAIN main, LISTAFUNCAO list_func){
    this.main = main 
    this.list_func = list_func
  }

  @Override
  public String toString() {
    // Declaração do pacote e importação
    StringBuilder javaCode = new StringBuilder();
    javaCode.append("package org.test;\n");
    javaCode.append("import java.util.Scanner;\n");

    // Início da classe KarloffTeste
    javaCode.append("public class KarloffTeste {\n\n");

    // Adicionar o código principal, se existir
    if (this.main != null) {
        javaCode.append(this.main).append("\n");
    }

    // Adicionar a quebra de linha adicional, se lf não for nulo
    if (this.lf != null) {
        javaCode.append(this.lf);
    }

    // Fim da classe KarloffTeste
    javaCode.append("\n}\n");

    return javaCode.toString();
  }
}


//CLASSE MAIN 
class MAIN{
  ArrayList<DECLARACAOVARIAVEL> declaracaovariavel; 
  ArrayList<SEQUENCIACOMANDO> sequenciacomando ; 

  MAIN(ArrayList<DECLARACAOVARIAVEL> declaracaovariavel,ArrayList<SEQUENCIACOMANDO> sequenciacomando ){
    this.declaracaovariavel = declaracaovariavel ; 
    this.sequenciacomando = sequenciacomando ; 
  }

   @Override
    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("void main() {\n");
        for (DECLARACAOVARIAVEL decVar : this.declaracaovariavel) {
            stringBuilder.append(decVar).append("\n");
        }
        return stringBuilder.append(this.sequenciacomando).append("}\n").toString();
    }
}

//FAZ AS DECLARACOES DE VARIAVEIS
class DECLARACAOVARIAVEL{
    TOKENID tokenid;
    TIPOVARIAVEL tipovariavel;

    DECLARACAOVARIAVEL(TOKENID tokenid, TIPOVARIAVEL tipovariavel){
        this.tipovariavel = tipovariavel;
        this.tokenid = tokenid;
    }

    @Override
    public String toString() {
        if (this.tipovariavel != null && this.tokenid != null)
            return this.tipovariavel + " " + this.tokenid + ";";
        else
            return "";
    }
}

//RETORNA OS TIPOS DE VARIAVEIS EM C
class TIPOVARIAVEL{
    String tipo;

    TIPOVARIAVEL(String tipo){
        this.tipo = tipo;
    }

    @Override
    public String toString() {
        switch (this.tipo){
            case "integer":
                return "int";
            case "bool":
                return "bool";
            default:
                return "";
        }
    }
}

//RETORNA A SEQUENCIA DE COMANDOS 
class SEQUENCIACOMANDO {
    ArrayList<COMANDO> comando;

    SEQUENCIACOMANDO(ArrayList<COMANDO> comando){
        this.comando = comando;
    }

    @Override
    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        for (COMANDO com : this.comando) {
            stringBuilder.append(com).append("\n");
        }
        return stringBuilder.toString();
    }
}

//CLASSE BASE PARA OS COMANDOS
class COMANDO{}

//RETORNA O COMANDO DE ATRIBUICAO EM C 
class ATRIBUICAO extends COMANDO{
  EXP exp ; 
  TOKENID tokenid; 

  ATRIBUICAO(EXP exp , TOKENID tokenid){
    this.exp = exp ; 
    this.tokenid = tokenid ;
  }
  
  @Override
    public String toString() {
        return this.tokenid + " = " + this.exp + ";";
    }

}

//RETORNA A CHAMADA DE FUNCAO EM C 
class CHAMADAFUNCAO extends COMANDO{
  TOKENID tokenid ; 
  LISTAEXPRESSAO listaexpressao ; 

  CHAMADAFUNCAO(TOKENID tokenid, LISTAEXPRESSAO listaexpressao) {
    this.tokenid = tokenid ; 
    this.listaexpressao = listaexpressao; 
  }

    @Override
    public String toString() {
        if (this.listaExp == null) return this.tokenId + "()" + ";";
        return this.tokenId + "(" + this.listaExp + ")" + ";";
    }
}

//RETORNA O LACO WHILE EM C  
class LACO_WHILE extends COMANDO{
  EXP exp ; 
  SEQUENCIACOMANDO sequenciacomando ; 

  LACO_WHILE(EXP exp, SEQUENCIACOMANDO sequenciacomando){
    this.exp = exp ; 
    this.sequenciacomando = sequenciacomando; 
  }

    @Override
    public String toString() {
        return "while (" + this.exp + ") {\n" + this.sequenciacomando + "}";
    }
}

//RETORNA O IF EM C 
class COND_IF extends COMANDO{
  EXP exp ; 
  SEQUENCIACOMANDO sequenciacomando ; 

  COND_IF(EXP exp , SEQUENCIACOMANDO sequenciacomando) {
    this.exp = exp ; 
    this.sequenciacomando = sequenciacomando; 
  }

  @Override
    public String toString() {
        return "if (" + this.exp + ") {\n" + this.sequenciacomando + "}";
    }
}

//RETORNA DO WHILE EM C 
class LACO_REPEAT extends COMANDO{
  EXP exp ; 
  SEQUENCIACOMANDO sequenciacomando ; 

  LACO_REPEAT(EXP exp , SEQUENCIACOMANDO sequenciacomando){
    this.exp = exp ; 
    this.sequenciacomando = sequenciacomando ; 
  }

   @Override
    public String toString() {
        return "do {\n" + this.sequenciacomando + "} while (" + this.exp + ");";
    }
}

//RETORNA RETURN EM C 
class RETORNO extends COMANDO{
  EXP exp ; 

  RETORNO(EXP exp){
    this.exp = exp ; 
  }

  @Override
  public String toString() {
      return "return " + this.exp + ";";
  }
}

//RETORN PRINT EM C 
class PRINT extends COMANDO{
  EXP exp ; 

  PRINT(EXP exp){
    this.exp = exp ; 
  }

  @Override
  public String toString() {
      return "printf(\"%d\" ," + this.exp + ");";
  }
}

//RETORNA SCANF EM C 
class LEITURA extends COMANDO{
  TOKENID tokenid ; 

  LEITURA(TOKENID tokenid){
    this.tokenid = tokenid 
  }

  @Override
  public String toString() {
      return "scanf(\"%d\", &" + this.tokenid + ");";
  }
}

class EXP{}

class RECURSAOEXP extends EXP{
  EXP exp1 ; 
  EXP exp2 ; 
  OP op 
  
  RECURSAOEXP(EXP exp1, EXP exp2, OP op){
    this.exp1 = exp1 ; 
    this.exp2 = exp2 ; 
    this.OP = op ; 
  }

  @Override
    public String toString() {
        return "(" + this.exp1 + " " + this.op + " " + this.exp2 + ")";
    }
}

class FATOR extends EXP{}
class TOKENID extends FARTOR{
  String tk ; 

  TOKENID(String tk){
    this.tk = tk ; 
  }

  @Override
    public String toString() {
        return this.tk;
    }
}

class TOKENNUM extends FATOR{
  Integer num ;  
  
  TOKENNUM(Integer num){
    this.num = num ; 
  }
 
 @Override
    public String toString() {
        return this.num.toString();
    }
}

class CHAMADAFUNCAOFATOR extends FATOR{
  TOKENID tokenid ; 
  LISTAEXPRESSAO listaexpressao ; 

  CHAMADAFUNCAOFATOR(TOKENID tokenid , LISTAEXPRESSAO listaexpressao){
    this.tokenid = tokenid ; 
    this.listaexpressao = listaexpressao ; 
  }
  
  @Override
  public String toString() {
      if (this.listaexpressao == null) return this.tokenid + "()";
        return this.tokenid + "(" + this.listaexpressao + ")";
    }
}

class TF extends Fator{
    String tf;

    TF(String tf){
        this.tf = tf;
    }

    @Override
    public String toString() {
        return this.tf;
    }
}

class OP{
  String op ; 

  OP(String op){
    this.op = op ; 
  }

  @Override
    public String toString() {
        return this.op;
    }
}

class LISTAEXPRESSAO{
    ArrayList<EXP> exp;

    LISTAEXPRESSAO(ArrayList<EXP> exp){
        this.exp = exp;
    }

    @Override
     public String toString() {
        if (this.exp.size() == 1) return exp.get(0).toString();
        StringBuilder stringBuilder = new StringBuilder();
        for (EXP ep : this.exp) {
            stringBuilder.append(ep).append(", ");
        }
        return stringBuilder.toString();
    }
}

class FUNCAO{
    TOKENID tokenid;
    TIPOVARIAVEL tipovariavel;
    LISTAARGUMENTOS listaargumentos;
    ArrayList<DECLARACAOVARIAVEL> declaracaovariavel;
    SEQUENCIACOMANDO sequenciacomandos;

    FUNCAO(TOKENID tokenid,TIPOVARIAVEL tipovariavel,LISTAARGUMENTOS listaargumentos,ArrayList<DECLARACAOVARIAVEL> declaracaovariavel,SEQUENCIACOMANDO sequenciacomandos){
            this.tokenid = tokenid;
            this.tipovariavel = tipovariavel;
            this.listaargumentos = listaargumentos;
            this.declaracaovariavel= declaracaovariavel;
            this.sequenciacomandos = sequenciacomandos;
    }

  @Override
     public String toString() {
        StringBuilder stringBuilder = new StringBuilder(this.tipovariavel + " " + this.tokenid + "(" + this.listaargumentos + ") {\n");
        for (DECLARACAOVARIAVEL decVar : this.declaracaovariavel) {
            stringBuilder.append(decVar).append("\n");
        }
        stringBuilder.append(sequenciacomandos).append("}\n");
        return stringBuilder.toString();
    }
}

class LISTAFUNCAO{
    ArrayList<FUNCAO> funcoes;

    LISTAFUNCAO(ArrayList<FUNCAO> funcoes){
        this.funcoes = funcoes;
    }

    @Override
     public String toString() {
        if (this.funcoes.size() == 1) return this.funcoes.get(0).toString();
        StringBuilder stringBuilder = new StringBuilder();
        for (Funcao func : this.funcoes) {
            stringBuilder.append(func.toString()).append("\n");
        }
        return stringBuilder.toString();
    }
}

class ARGUMENTO{
    TOKENID tokenid;
    TIPOVARIAVEL tipovariavel;

    Argumento(TOKENID tokenid, TIPOVARIAVEL tipovariavel){
        this.tokenid = tokenid;
        this.tipovariavel = tipovariavel;
    }
    
    @Override
     public String toString() {
        return this.tipovariavel + " " + this.tokenid;
    }
}

class LISTAARGUMENTOS{
    ArrayList<ARGUMENTO> argumentos;

    LISTAARGUMENTOS(ArrayList<ARGUMENTO> argumentos){
        this.argumentos = argumentos;
    }

    @Override
     public String toString() {
        if (this.argumentos.size() == 1) return this.argumentos.get(0).toString();
        StringBuilder stringBuilder = new StringBuilder();
        for (ARGUMENTO arg : this.argumentos) {
            stringBuilder.append(arg).append(", ");
        }
        return stringBuilder.toString();
    }
}

public class Karloff {
  public static void main(String args[]) throws ParseException, IOException {

    Karloff parser = new Karloff(new FileInputStream(args[0]));
    KARLOFFARVORE  arvore = parser.Karloff()
    print(Karloff)
  }

}

PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <VOID: "void">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <NEWVAR: "newVar">
| <PONTOVIRGULA: ";">
| <INTEIRO: "integer">
| <BOOLEANO: "bool">
| <ATRIB: "=">
| <IF: "if">
| <THEN: "then">
| <WHILE: "while">
| <REPEAT: "repeat">
| <UNTIL: "until">
| <RETURN: "return">
| <SOUT: "System.output">
| <SREADINT: "System.readint">
| <TRUE: "true">
| <FALSE: "false">
| <SOMA: "+">
| <SUB: "-">
| <MULT: "*">
| <DIV: "/">
| <AND: "&">
| <OR: "|">
| <MENOR: "<">
| <MAIOR: ">">
| <IGUAL: "==">
| <VIRGULA: ",">
| <FUNC: "func">
}

TOKEN :
{
  <NUM : (["0"-"9"])+>
 |< ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*>

}

// KARLOFF → MAIN FUNC?
KARLOFFARVORE Karloff () :
{ MAIN main = null ; LISTAFUNCAO list_func = null ;}
{ 
  main = Main() (list_func = Func())?
<EOF>
  {return list_func == null ? new KARLOFFARVORE(main) : new KARLOFFARVORE(main, list_func);}

}

// MAIN → "void" "main" "(" ")" "{" VARDECL SEQCOMANDOS "}"
MAIN Main () :
{ArrayList<DECLARACAOVARIAVEL> declaracaovariavel = null ; ArrayList<SEQUENCIACOMANDO> sequenciacomando = null ;}
{
<VOID> <MAIN> <APARENTESES> <FPARENTESES> <ACHAVES> declaracaovariavel = Vardecl() sequenciacomando = SeqComandos() <FCHAVES>
 {return new Principal(declaracaovariavel, sequenciacomando);}
}


// VARDECL → VARDECL "newVar" TIPO TOKEN_id ";" | vazio
ArrayList<DECLARACAOVARIAVEL> Vardecl () :
{Token t = null ; TIPOVARIAVEL tipovariavel = null ; ArrayList<DECLARACAOVARIAVEL> dv = new ArrayList();}
{
    (<NEWVAR> tipovariavel =Tipo() t =<ID> <PONTOVIRGULA> {dv.add(new DECLARACAOVARIAVEL(tipovariavel, new TOKENID(t.image)));})*
    {return dv;}
}

// TIPO → "integer" | "bool"
TIPOVARIAVEL Tipo () :
{TIPOVARIAVEL tipovariavel = null ;}
{
<INTEIRO>{tipovariavel = new TIPOVARIAVEL("integer") ;} | <BOOLEANO> {tipovariavel = new TIPOVARIAVEL("bool");}
 {return tipovariavel;}
}

// SEQCOMANDOS → SEQCOMANDOS COMANDO | vazio
SEQUENCIACOMANDO  SeqComandos () :
{COMANDO c = null ; ArrayList<COMANDO> comandos = new ArrayList() ; }
{
    (c=COMANDO() {comandos.add(c);})*
    {return new SEQUENCIACOMANDO(comandos);}
}


// COMANDO → TOKEN_id COMANDO’
// | "if" "(" EXP ")" "then" "{" SEQCOMANDOS "}"  ";"
// | "while" "(" EXP ")" "{" SEQCOMANDOS "}"  ";"
// | "repeat" "{" SEQCOMANDOS "}" "until" "(" EXP ")"  ";"
// | "return" EXP  ";"
// | "System.output" "(" EXP ")"  ";"

COMANDO Comando () :
{Token t = null; TOKENID tokenid = null; SEQCOMANDOS seqCom = null;
EXP e = null; COMANDO result = null; COMANDO comL = null;}
{
  t=<ID> comL=Comando_(new TOKENID(t.image)) {result = comL;}
| (<IF> <APARENTESES> e=Exp() <FPARENTESES> <THEN> <ACHAVES> seqCom = SeqComandos() <FCHAVES> <PONTOVIRGULA>) {result = new COND_IF(e, seqCom);}
| (<WHILE> <APARENTESES> e=Exp() <FPARENTESES> <ACHAVES> seqCom = SeqComandos() <FCHAVES> <PONTOVIRGULA>)  {result = new LACO_WHILE(e, seqCom);}
| (<REPEAT> <ACHAVES> seqCom = SeqComandos() <FCHAVES> <UNTIL> <APARENTESES> e = Exp() <FPARENTESES> <PONTOVIRGULA>) {result = new LACO_REPEAT(e, seqCom)}
| (<RETURN> e = Exp() <PONTOVIRGULA>)  {result = new RETORNO(e);}
| (<SOUT> <APARENTESES> e = Exp() <FPARENTESES> <PONTOVIRGULA>){result = new PRINT(e);}

   {return result;}

}

// COMANDO’ → "=" COMANDO’’ | "(" LISTAEXP? ")"  ";"
COMANDO Comando_ (TOKENID t) :
{COMANDO result = null; COMANDO comLL = null; LISTAEXPRESSAO l = null;}
{
  (
        <ATRIB> comLL=Comando__(t) {result = comLL;}
        |<APARENTESES> (l=ListaExp())? <FPARENTESES> <PONTOVIRGULA> {result = new CHAMADAFUNCAO(t, l);}
  )
  {return result;}
}

// COMANDO’’ → EXP ";" | "System.readint" "(" ")" ";"
COMANDO Comando__ (TOKENID t) :
{COMANDO result = null ; EXP e = null}
{
    (
        e=Exp() <PONTOVIRGULA> {result = new ATRIBUICAO(e, t);}
        <SREADINT> <APARENTESES> <FPARENTESES> <PONTOVIRGULA> {result = new LEITURA(t);}
    )
    {return result;}
}

//EXP →  "(" EXP OP EXP ")" | FATOR
EXP Exp () :
{EXP e1 = null; EXP e2 = null; OP op = null; EXP result = null; FATOR f = null;}
{ 
  (
  <APARENTESES> e1 = Exp() op = Op() e2 = Exp() <FPARENTESES> {result = new RECURSAOEXP(e1, e2, op);}
| f = Fator() {result = f;}
  )
}

//FATOR →  TOKEN_id FATOR’| TOKEN_numliteral | "true" | "false"
FATOR Fator () :
{FATOR result = null; FATOR fatorL = null; Token t = null; TOKENID tokenid = null; TOKENNUM TokenNum = null;}
{
  (
        t=<ID> fatorL=Fator_(new TOKENID(t.image)) {result = fatorL;}
        |t=<NUM> {result = new TOKENNUM (Integer.parseInt(t.image));}
        |<TRUE> {result = new TF("true");}
        |<FALSE> {result = new TF("false");}
    )
    {return result;}
}

//FATOR’ →  "(" LISTAEXP? ")" | vazio
FATOR Fator_ (TOKENID tokenid) :
{LISTAEXPRESSAO le = null ; Token t = null ; }
{
(<APARENTESES> (le = ListaExp())? <FPARENTESES>)?
{return t == null ? tokenid : new CHAMADAFUNCAOFATOR(tokenid, le);}
}

//OP →  "+" | "-" | "*" | "/" | "&" | "|" | "<" | ">" | "=="
OP Op () :
{OP result = null ; }
{
 (
        <SOMA> {result = new OP("+");}
        | <SUB> {result = new OP("-");}
        | <MULT> {result = new OP("*");}
        | <DIV> {result = new OP("/");}
        | <AND> {result = new OP("&");}
        | <OR> {result = new OP("|");}
        | <MENOR> {result = new OP("<");}
        | <MAIOR> {result = new OP(">");}
        | <IGUAL> {result = new OP("==");}
    )
    {return result;}
}

//LISTAEXP → EXP | LISTAEXP "," EXP
LISTAEXPRESSAO ListaExp () :
{EXP e = null; ArrayList<EXP> lista = new ArrayList();}
{
    e=Exp() {lista.add(e);} (<VIRGULA> e=Exp() {lista.add(e);})*
    {return new LISTAEXPRESSAO(lista);}
}

//FUNC → FUNC "func" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
//        | "func" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
LISTAFUNCAO Func () :
{TIPOVARIAVEL tipoDeVar = null; LISTAARGUMENTOS la = null; ArrayList<FUNCAO> funcoes = new ArrayList();
ArrayList<DECLARACAOVARIAVEL> declaracaoVar = null; SEQUENCIACOMANDO sequenciaCom = null;
Token t = null; TOKENID tokenid = null;}
{
    (<FUNC> tipoDeVar=Tipo() t=<ID> <APARENTESES> (la=ListaArg())? <FPARENTESES> <ACHAVES> declaracaoVar=Vardecl() sequenciaCom =SeqComandos() <FCHAVES> {funcoes.add(new FUNCAO(new TOKENID(t.image), tipoDeVar, la, declaracaoVar, sequenciaCom));})+
    {return new LISTAFUNCAO(funcoes);}
}


//LISTAARG → TIPO TOKEN_id | LISTAARG "," TIPO TOKEN_id
LISTAARGUMENTOS ListaArg () :
{Token t = null; TIPOVARIAVEL tipoDeVar = null; TOKENID tokenId = null;
LISTAARGUMENTOS la = null; ARGUMENTO arg = null; ArrayList<ARGUMENTO> args = new ArrayList();}
{
    tipoDeVar=Tipo() t=<ID> {args.add(new ARGUMENTO(new TOKENID(t.image), tipoDeVar));} (<VIRGULA> tipoDeVar=Tipo() t=<ID> {args.add(new ARGUMENTO(new TOKENID(t.image), tipoDeVar));})*
    {return new LISTAARGUMENTOS(args);}
}